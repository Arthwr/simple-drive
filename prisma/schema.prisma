// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum RoleEnum {
  GUEST
  MEMBER
  ADMIN
}

enum ActionEnum {
  READ
  WRITE
  SHARE
  DELETE
}

// Passport session
model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.Text
  expiresAt DateTime
}

// Models
model User {
  id        String         @id @default(uuid())
  name      String         @default("friend")
  email     String         @unique
  password  String
  createdAt DateTime       @default(now())
  temporary Boolean        @default(false)
  expiresAt DateTime?
  roleId    String
  role      Role           @relation(fields: [roleId], references: [id])
  storage   Storage?
  shared    SharedFolder[]
}

model Role {
  id           String           @id @default(uuid())
  name         RoleEnum         @unique
  users        User[]
  permissions  RolePermission[]
  storageLimit StorageLimit?
}

model StorageLimit {
  id      String  @id @default(uuid())
  roleId  String  @unique
  role    Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  maxSize BigInt?
}

model RolePermission {
  id     String     @id @default(uuid())
  roleId String
  role   Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  action ActionEnum

  @@unique([roleId, action])
}

model Storage {
  id      String   @id @default(uuid())
  userId  String   @unique
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  folders Folder[] @relation("FolderStorage")
}

model Folder {
  id            String         @id @default(uuid())
  publicId      String         @default(nanoid())
  name          String         @default("New Folder")
  parentId      String?
  parent        Folder?        @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children      Folder[]       @relation("FolderHierarchy")
  repositoryId  String
  repository    Storage        @relation("FolderStorage", fields: [repositoryId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  files         File[]
  sharedFolders SharedFolder[]

  @@unique([repositoryId, publicId])
}

model SharedFolder {
  id        String   @id @default(uuid())
  folderId  String
  folder    Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  userId    String
  sharedBy  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime
  url       String   @unique
}

model File {
  id          String   @id @default(uuid())
  publicId    String   @default(nanoid())
  name        String
  size        BigInt
  url         String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  folderId    String
  folder      Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  storagePath String   @unique

  @@unique([publicId, folderId])
}
